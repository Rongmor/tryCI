Списки - один из самых наиболее используемых типов данных. Они позволяют хранить в себе много других объектов вместе. Это их главная цель. Списки - не единственный тип данных, способных хранить в себе элементы. Все такие типы называются контейнерами или последовательностями. Но об этом позже.

1) Создание списка

Список из чисел 1, 2, 3, 4, 5:

lst = [1, 2, 3, 4, 5]
print(lst)

Пустой список:

lst = []
print(lst)

Или:

lst = list()
print(lst)

Вообще, увидеть тип переменной можно вот так:

n = 0
print(type(n))
r = 0.5
print(type(r))
lst = [1, 2, 3]
print(type(lst))

Уже знакомые нам целые числа имеют тип int, вещественные числа имеют тип float, а списки имеют тип list

2) Получение элемента по индексу

lst = [1, 2, 3]
print(lst[0])
print(lst[1])
print(lst[2])
print(lst[3])

Что происходит здесь? Здесь происходит доступ к элементам списка по их индексу - то есть номеру в порядке расположения элементов в списке. Дело в том, что в питоне и во многих других языках считается, что первый элемент списка (или любой последовательности) имеет индекс 0, то есть является нулевым элементом. Второй элемент имеет индекс 1 и так далее. Сначала это может показаться странным и неудобным, но потом поймешь что это хорошо. Кстати именно поэтому мы получили ошибку IndexError на последней строчке, а не на первой: в данном списке три элемента, а значит доступны элементы с индексами 0, 1 и 2, а элемента с индексом 3 не существует.

Полученные по индексу элементы можно присваивать переменным:

lst = [1, 2, 3]
a = lst[0]
print(a)

И вообще, полученные элементы можно использовать так же, как и любое другое значение: в условия if, в выражениях и т.д.

lst = [1, 2, 3]
if lst[2] == 3:
    print('lst[2] is three')
print(lst[0] + lst[1] + lst[2])

3) Присвоение значения элементу списка по индексу

lst = [1, 2, 3]
lst[1] = 4
print(lst)

lst[5] = 5
print(lst)

Элемента с индексом 5 не существует - опять возникает ошибка

4) Добавление элемента в список

lst = [1, 2, 3]
print(lst)
lst.append(4)
print(lst)

Что здесь происходит? Происходит вызов не простой функции, а специальной функции, которая называется методом. Простая функция могла бы быть вызвана так:

append(lst, 4)

А метод вызывается именно так: после имени переменной ставится точка, сразу же пишется имя метода, а потом скобки со списком аргументов. О методах больше будет рассказано потом. Сейчас важно понять, что метод append существует только у переменных типа "список" и вызывается он именно так. И понять, что он добавляет элемент в список.

Еще важно отметить следующее:

lst = [1, 2, 3]
lst.append(2)
print(lst)

То есть в списке могут встречаться повторяющиеся элементы. 

4) Удаление элемента из списка по индексу

lst = [1, 2, 3]
a = lst.pop(1)
print(lst)
print(a)

pop - то же метод как и append. Он удаляет из списка элемент и возвращает его в качестве значения. Если указать несуществующий индекс, то возникнет ошибка:

lst = [1, 2, 3]
a = lst.pop(5)
print(lst)
print(a)

6) Удаление элемента по значению

lst = [10, 20, 30]
lst.remove(20)
print(lst)
lst.remove(15)
print(lst)

Возникает ошибка, если указать значение, которого нет в списке

7) Удаление всех элементов списка

lst = [1, 2, 3]
lst.clear()
print(lst)

Довольно-таки бесполезный метод, на практике не используется

8) Вставка элемента в произвольное место списка

lst = [1, 2, 3, 4, 5[
lst.insert(3, 30)
print(lst)
print(lst[3])

Работает таким образом, что insert(i, n) = вставить n на i-ый индекс, то есть после вставки lst[i] = n

При указании несуществующих индексов ошибки не возникает, но это уже другая история, это потом

9) Сколько раз элемент встречается в списке?

lst = [1, 2, 2, 3, 3, 3]
print(lst.count(1))
print(lst.count(2))
print(lst.count(3))
print(lst.count(4))

10) На какой позиции находится элемент?

lst = [1, 2, 3, 2, 1]
print(lst.index(1))
print(lst.index(2))
print(lst.index(3))
print(lst.index(4))

Тоже ошибка


